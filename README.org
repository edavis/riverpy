* riverpy

riverpy is a River of News aggregator written in Python.

Once up and running, it looks like [[http://riverpy-demo.s3.amazonaws.com/index.html][this]].

** Requirements

riverpy only requires two outside dependencies: redis and libyaml.

To install them on Mac OSX: =$ brew install redis libyaml=

To install them on Debian/Ubuntu: =$ sudo aptitude install redis libyaml-dev=

If you're not on a Debian-based distro, replace "aptitude install"
with whatever your distro uses. Similarly, libyaml might be under a
different package name.

** Quick Start

It's recommended to install riverpy into a [[http://www.virtualenv.org/en/latest/virtualenv.html][virtualenv]]. Once virtualenv
is installed, here's how you run riverpy:

#+BEGIN_SRC

$ virtualenv ~/riverpy-env
$ . ~/riverpy-env/bin/activate
$ pip install git+https://github.com/edavis/riverpy#egg=riverpy
$ river -o ~/riverpy/ https://raw.githubusercontent.com/edavis/riverpy/master/subscription-lists/demo.txt

#+END_SRC

** Installation

=$ pip install git+https://github.com/edavis/riverpy#egg=riverpy=

** Checking feeds

=$ river -b S3-BUCKET SUBSCRIPTION-LIST-URL=

For example, here's how the above demo is generated:

=$ river -b river.davising.com -e 150 https://dl.dropboxusercontent.com/u/19853263/feeds.txt=

** Subscription lists

At the core of riverpy are "subscription lists."

Subscription lists are files that contain URLs of RSS feeds. Each feed
belongs to a category. Adding feeds to this file is how you
"subscribe" to them.

riverpy accepts two kinds of subscription lists: plain text and OPML.

*Plain text* is the simpler of the two and recommended if you're
unsure which to use.

Here's an example of a plain text subscription list:
https://dl.dropboxusercontent.com/u/19853263/feeds.txt

The nice thing about this format is you only need a text editor (e.g.,
Notepad, TextEdit, etc.) to use it.

The format is quite simple. Each category has a name followed by a
colon. Then each feed for that category follows this format:

- two spaces
- a dash
- another space
- the URL

*OPML* is the other subscription list format accepted by riverpy.

OPML is a dialect of XML and not generally written by hand. Instead,
it's often generated by outliners or other programs.

Here's an example of an OPML subscription list:
http://projects.davising.com/riverpy/feeds.opml

The format is also pretty simple. Each top-level headline is a
category. The children of each top-level headline have type="rss" and
xmlUrl set to the RSS URL. Include nodes work (though only one level
deep.)

** Unfinished

- add option to spit out --json or --jsonp
- add option to write to local directory
- web: use permalinks

- set up proper demo (with not my feeds)
  - One to write to a local folder
  - One to write to S3
    - mention AWS account is needed
    - Uses boto, so config boto.cfg (link to boto docs for this)
- use spinner icon when changing feeds
- have nav dropdown float at top
- clean up setup.py
- add subscription list to metadata
- bump metadata.version
- make web frontend mobile friendly/responsive
- add a latest (just those from last full update) and firehose
  (everything from all rivers)
- add changelog
- log WARNING and above to a file
- add metadata to categories and/or feeds
  - categories: position?
  - feeds: weight? name?
- flesh out docs for terminology
- write small flask frontend for PuSH
- allow includes in subscription list
- only update a given category by URL#name

** License

BSD
